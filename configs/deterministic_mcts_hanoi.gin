# Parameters for Runner:
# ==============================================================================
Runner.agent_class = @alpacka.agents.DeterministicMCTSAgent
Runner.batch_stepper_class = @alpacka.batch_steppers.LocalBatchStepper
Runner.env_class = @alpacka.envs.Hanoi
Runner.episode_time_limit = 1000
Runner.n_envs = 2
Runner.n_epochs = 10000
Runner.n_precollect_epochs = 15
Runner.network_class = @alpacka.networks.KerasNetwork
Runner.trainer_class = @alpacka.trainers.SupervisedTrainer

# Parameters for Hanoi:
# ==============================================================================
Hanoi.n_disks = 3
Hanoi.reward_for_solved = 1.
Hanoi.reward_for_invalid_action = 0.

# Parameters for DeterministicMCTSAgent:
# ==============================================================================
DeterministicMCTSAgent.avoid_loops = True
DeterministicMCTSAgent.gamma = 0.99
DeterministicMCTSAgent.n_passes = 10
DeterministicMCTSAgent.value_traits_class = @alpacka.agents.deterministic_mcts.ScalarValueTraits
DeterministicMCTSAgent.value_accumulator_class = @alpacka.agents.deterministic_mcts.ScalarValueAccumulator

# Parameters for KerasNetwork:
# ==============================================================================
KerasNetwork.loss = 'mean_squared_error'
KerasNetwork.loss_weights = None
KerasNetwork.metrics = ['mae', 'mse']
KerasNetwork.model_fn = @alpacka.networks.keras.mlp
KerasNetwork.optimizer = 'adam'
KerasNetwork.train_callbacks = None
KerasNetwork.weight_decay = 0.

# Parameters for mlp:
# ==============================================================================
mlp.activation = 'relu'
mlp.hidden_sizes = (50,50)
mlp.output_activation = None

# Parameters for ScalarValueTraits:
# ==============================================================================
ScalarValueTraits.dead_end_value = -2.0

# Parameters for SupervisedTrainer:
# ==============================================================================
SupervisedTrainer.batch_size = 32
SupervisedTrainer.n_steps_per_epoch = 13
SupervisedTrainer.replay_buffer_capacity = 500000
SupervisedTrainer.replay_buffer_sampling_hierarchy = ['solved']
SupervisedTrainer.target = @alpacka.trainers.supervised.target_value